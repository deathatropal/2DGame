package basics;

import java.awt.Graphics;
import java.util.LinkedList;

public class BlockList 
{
	private LinkedList<Block> blocks;
	private LinkedList<Floor> flooring;
	private Wall wall;
	private Floor floor;
	private int width;
	private int height;
	private int scale;
	private boolean lastWasE;
	
	public BlockList(Level loader, int width, int height, int scale)
	{
		this.width = width;
		this.height = height;
		this.scale = scale;
		blocks = new LinkedList();
		flooring = new LinkedList();
		wall = new Wall(0, 0, width, height, 0, scale);
		floor = new Floor(0, 0, width, height, 0, scale);
		load(loader, width, height);
	}
	
	public void update(long timeDiff)
	{
		
	}
	
	public void drawWalls(Graphics graphics, Screen screen)
	{
		for(Block block : blocks)
		{
			block.draw(graphics, screen);
		}
	}
	
	public void drawFloor(Graphics graphics, Screen screen)
	{
		for(Floor floorInFlooring : flooring)
		{
			floorInFlooring.draw(graphics, screen);
		}
	}
	
	public boolean canMoveX(Player player, double futureMoveX)
	{
		for(Block block : blocks)
		{
			if(!block.canMoveX(player, futureMoveX))
			{
				return false;
			}
		}
		return true;
	}
	
	public boolean canMoveY(Player player, double futureMoveY)
	{
		for(Block block : blocks)
		{
			if(!block.canMoveY(player, futureMoveY))
			{
				return false;
			}
		}
		return true;
	}
	
	private void load(Level loader, int width, int height)
	{
		LinkedList list = loader.getInfo();
		int y = height / 2;
		int x = width / 2 + wall.imageWidth();
		Wall addWall;
		
		for(int i = 0; i < list.size(); i++)
		{
			if(list.get(i).equals("w")) //brick wall
			{
				addWall = new Wall(x, y, width, height, 0, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("c")) //corner brick wall
			{
				addWall = new Wall(x, y, width, height, 1, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("r")) //brick wall turned
			{
				addWall = new Wall(x, y, width, height, 2, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("i") && lastWasE == false) //brick window
			{
				addWall = new Wall(x, y, width, height, 3, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("o") && lastWasE == false) //brick window turned
			{
				addWall = new Wall(x, y, width, height, 4, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("j") && lastWasE == false) //inside wall
			{
				addWall = new Wall(x, y, width, height, 5, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("k") && lastWasE == false) //inside wall turned
			{
				addWall = new Wall(x, y, width, height, 6, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("l") && lastWasE == false) //inside wall corner
			{
				addWall = new Wall(x, y, width, height, 7, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			if(list.get(i).equals("p") && lastWasE == false) //lamp
			{
				addWall = new Wall(x, y, width, height, 8, scale);
				addWall.setRect(addWall.imageWidth(), addWall.imageHeight());
				blocks.add(addWall);
				lastWasE = false;
			}
			
			
			
			if(list.get(i).equals("f") && lastWasE == false) //side walk
			{
				flooring.add(new Floor(x, y, width, height, 0, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals(" ") && lastWasE == false) //fancy ground
			{
				flooring.add(new Floor(x, y, width, height, 1, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("q") && lastWasE == false) //tiled floor white
			{
				flooring.add(new Floor(x, y, width, height, 2, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("x") && lastWasE == false) //tiled floor black
			{
				flooring.add(new Floor(x, y, width, height, 3, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("v") && lastWasE == false) //door way
			{
				flooring.add(new Floor(x, y, width, height, 4, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("y") && lastWasE == false) // door way turned
			{
				flooring.add(new Floor(x, y, width, height, 5, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("b") && lastWasE == false) //end of fancy ground
			{
				flooring.add(new Floor(x, y, width, height, 6, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("u") && lastWasE == false) //light wood
			{
				flooring.add(new Floor(x, y, width, height, 7, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("g") && lastWasE == false) //light wood
			{
				flooring.add(new Floor(x, y, width, height, 8, scale));
				lastWasE = false;
			}
			
			if(list.get(i).equals("e")) //end
			{
				x = width / 2;
				y = y + wall.imageHeight();
				lastWasE = true;
			}
			else
			{
				x = x + wall.imageWidth();
				lastWasE = false;
			}
		}
	}
	
	public LinkedList getBlockLocations()
	{
		return blocks;
	}
}
